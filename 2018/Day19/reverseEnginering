A messy reverse engineering of the assembly code to psydo code

#ip 2           Pointer = 2
addi 2 16 2     Jump 16 steps forward (jump to _1)
seti 1 0 4  _2  register[4] = 1
seti 1 0 1  _8  register[1] = 1
mulr 4 1 3  _6  register[3] = register[4] * register[1] //= 1
eqrr 3 5 3      register[3] = 0? register[3]==registers[5]
addr 3 2 2      register[2] += register[3] (0 / 1) (jump to _4 or nothing)
addi 2 1 2      register[2] += 1 (jump to _3)
addr 4 0 0  _4  register[0] += register[4]
addi 1 1 1  _3  register[1]++
gtrr 1 5 3      register[3] = register[1] > register[5] ? 1 : 0
addr 2 3 2      register[2] += register[3] (0 / 1) (Jump maybe to _5)
seti 2 5 2      register[2] = 2 (Jump to _6)
addi 4 1 4  _5  register[4]++
gtrr 4 5 3      register[3] = register[4] > register[5] ? 1 : 0
addr 3 2 2      register[2] += register[3] (1 / 0) / (Jump maybe to _7)
seti 1 9 2      register[2] = 1 (Jump to _8)
mulr 2 2 2  _7  register[2] = register[2]^2 (Jump outside!)
addi 5 2 5  _1  register[5] += 2
mulr 5 5 5      register[5]^2
mulr 2 5 5      register[5] *= register[2]
muli 5 11 5     register[5] *= 11
addi 3 8 3      register[3] += 8
mulr 3 2 3      register[3] *= register[2]
addi 3 5 3      register[3] += 5
addr 5 3 5      register[5] += register[3]
addr 2 0 2      register[2] += register[0]
seti 0 9 2      register[2] = 0 (Jump to _2)
setr 2 8 3      register[3] = 27
mulr 3 2 3      register[3] = 27*28
addr 2 3 3      register[3] = 27^2 + 29 = 758
mulr 2 3 3      register[3] = 758 * 30 = 22740
muli 3 14 3     register[3] = 22740 * 14 = 318360
mulr 3 2 3      register[3] = 318360 * 32 = 10187520
addr 5 3 5      register[5] += 10187520
seti 0 6 0      register[0] = 0
seti 0 0 2      register[2] = 0 (jump to _2)

5: 1017        3: 181

3: (27*28+29)*30*14*32 = 10550400
5: 10550400 + 1017 = 10551417

register[5] += 2
register[5] *= register[5]
register[5] *= register[2] (= 19)
register[5] *= 11
register[3] += 8        reg[5] = 836
register[3] *= register[2] (= 22)
register[3] += 5
register[5] += register[3]
register[4] = 1

register[5] = 1017    register[3] = 181     register[4] = 1

_8  register[1] = 1
_6  register[3] = register[4] * register[1]
    register[3] = register[3] == registers[5] ? 1 : 0
    register[2] += register[3] (0 / 1) (jump to _4 or nothing)
    register[2] += 1 (jump to _3)
    register[0] += register[4]
_3  register[1]++
    register[3] = register[1] > register[5] ? 1 : 0
    register[2] += register[3] (0 / 1) (Jump maybe to _5)
    register[2] = 2 (Jump to _6)
_5  register[4]++
    register[3] = register[4] > register[5] ? 1 : 0
    register[2] += register[3] (1 / 0) / (Jump maybe to _7)
    register[2] = 1 (Jump to _8)
_7  register[2] = register[2]^2 (Jump outside!)
_1  register[5] += 2


A = 0  B = 0  C = 181   D = 1   E = 1017

A = 1  B = 1  C = 2   D = 2   E = 1017

_8  B = 1
_6  C = B * D
    C = C==E ? 1 : 0
    pc += C (0 / 1) (jump to _4 or nothing)
    pc += 1 (jump to _3)
    A += D
_3  B++
    C = B > E ? 1 : 0
    pc += C (0 / 1) (Jump maybe to _5)
    pc = 2 (Jump to _6)
_5  D++
    C = D > E ? 1 : 0
    pc += C (1 / 0) / (Jump maybe to _7)
    pc = 1 (Jump to _8)
_7  pc = pc^2 (Jump outside!)



Start of part 2:

A = 0  B = 0  C = 10550400   D = 0   E = 10551417

while(D < E) {
    B = 1
    while(B < E) {
        if((B*D) == E) {
            A += D
        }
        B++
    }
    D++
}
